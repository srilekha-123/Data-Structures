#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>
#define size 20
char s[size];
int top=-1;
void push(char item)
{
    if(top>size-1)
    {
        printf("stack overflow");
    }else{
        top = top+1;
s[top] = item;
    }
}
char pop()
{
    char item;
    if(top<0)
    {
        printf("underflow");
    }else{
        item=s[top];
        top=top-1;
        return item;
    }
}
int is_operator(char symbol)
{
if(symbol=='^' || symbol=='*' || symbol=='/' || symbol=='+' || symbol=='-')
{
return 1;
}
else
{
return 0;
}
}
int precedence(char symbol)
{
    if(symbol == '^')
{
return(3);
}
else if(symbol == '*' || symbol == '/')
{
return(2);
}
else if(symbol == '+' || symbol == '-')        
{
return(1);
}
else
{
return(0);
}
}
void infixtopostfix(char infix_exp[],char postfix_exp[])
{
    int i,j;
    char item;
    char x;
    push('(');
    strcat(infix_exp,")");
    i=0;
    j=0;
    item=infix_exp[i];
    while(item!='\0')
    {
        if(item=='(')
        {
            push(item);
        }else if(isdigit(item) || isalpha(item))
        {
            postfix_exp[j]=item;
            j++;
        }else if(is_operator(item)==1)
        {
            x=pop();
            while(is_operator(x)==1 && precedence(x)>=precedence(item))
            {
                postfix_exp[j]=x;
                j++;
                x=pop(x);
            }
push(x);
push(item);
        }else if(item==')')
        {
            x=pop();
            while(x!='(')
            {
                postfix_exp[j]=x;
                j++;
                x=pop();
            }
        }else{
            printf("invalid expression");
        }
        i++;
        item=infix_exp[i];
    }
    if(top>0)
    {
        printf("invalid expression");
    }
    postfix_exp[j]='\0';
}
void main()
{
    char infix[size],postfix[size];
    printf("enter infix expression\n");
    gets(infix);
    infixtopostfix(infix,postfix);
    printf("postfix expression is:\n");
    puts(postfix);
   
}
