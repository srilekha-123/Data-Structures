#include<stdio.h>                                                                                
#include<stdlib.h>
void create();
void display();
void ins_beg();
struct node {                                                                                            
int data;                                                                                        
struct node* next;                                                                                  
 }*newnode,*temp;                                                                      
struct node* head = NULL;                                                                        
struct node* tail = NULL;
void create ()                                                                                    
{                                                                                                        
char ch;                                                                                          
int value;                                                                                        
do                                                                                              
 {                                                                                                        
newnode=(struct node*)malloc(sizeof(struct node));                                                
printf("enter the value");                                                                      
 scanf("%d",&value);                                                                              
newnode->data=value;                                                                              
newnode->next=NULL;                                                                              
if(head==NULL)                                                                                  
 {                                                                                                        
head = newnode;                                                                                  
tail = newnode;                                                                          
 }      
 else                                                                                            
 {                                                                                                        
tail->next=newnode;                                                                            
  tail=newnode;                                                                            
}                                                                                                
 printf("C-continue,E-exit\n");                                                                    
scanf(" %c",&ch);                                                                        
 }                                                                                                
while(ch == 'C');                                                                        
}
void display()                                                                                  
 {                                                                                                        
 temp = head;
while(temp!=NULL)                                                                                
{                                                                                                      
  printf("%d ",temp->data);                                                                      
  temp=temp->next;                                                                        
}
}
void ins_beg()
{
    int value;
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("enter value:");
    scanf("%d",&value);
    newnode->data=value;
    newnode->next=head;
    head=newnode;
}
void ins_end()
{
    int value;
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("enter value:");
    scanf("%d",&value);
    newnode->data=value;
    newnode->next=NULL;
    tail->next=newnode;
    tail=newnode;
}
void ins_spe()
{
    int pos,value,i;
    temp=head;
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("enter value:\n");
    scanf("%d",&value);
    printf("enter position:\n");
    scanf("%d",&pos);
    for(i=0;i<pos-1;i++)
    {
        temp=temp->next;
    }
    newnode->data=value;
    newnode->next=temp->next;
    temp->next=newnode;
}
void del_beg()
{
    temp=head;
    head=head->next;
    temp->next=NULL;
}
void del_end()
{
    temp=head;
    while(temp->next!=tail)
    {
        temp=temp->next;
    }
    temp->next=NULL;
    tail=temp;
}
void del_pos()
{
    temp=head;
    int pos,i;
    printf("enter position:\n");
    scanf("%d",&pos);
    for(i=0;i<pos-1;i++)
    temp=temp->next;
    temp->next=temp->next->next;
}
void reverse()
{
    struct node*temp=NULL;
    struct node*temp2=head;
    struct  node*next;
    while(head!=NULL)
    {
        temp2=head->next;
        head->next=temp;
        temp=head;
        head=temp2;
    }
    head=temp;
}
void counts()
{
    struct node*temp=head;
    int count=0;
     while(temp != NULL){
 
       temp = temp->next;
        count++;
     }
    printf("\n Total no. of nodes is %d",count);
}
void main()
{
  int choice=0;
  while(choice<10)
  {
      printf("enter the choice\n");
      scanf("%d",&choice);
      switch(choice)
      {
        case 1:create();
               display();
               break;
        case 2:ins_beg();
               display();
               break;
        case 3:ins_end();
               display();
                break;
        case 4:ins_spe();
               display();
               break;
        case 5:del_beg();
               display();
               break;
        case 6:del_end();
               display();
               break;
        case 7:del_pos();
               display();
               break;
        case 8:reverse();
               display();
               break;
        case 9:counts();
               display();
               break;
        default:printf("not valid\n");
                break;
      }
  }
}
